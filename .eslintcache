[{"/Users/natalia/Development/flashcards/src/index.js":"1","/Users/natalia/Development/flashcards/src/reportWebVitals.js":"2","/Users/natalia/Development/flashcards/src/App.js":"3","/Users/natalia/Development/flashcards/src/reducers/rootReducer.js":"4","/Users/natalia/Development/flashcards/src/components/Card.js":"5","/Users/natalia/Development/flashcards/src/components/EdditableCard.js":"6"},{"size":710,"mtime":1607356597481,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1606877658013,"results":"9","hashOfConfig":"8"},{"size":3515,"mtime":1609886137777,"results":"10","hashOfConfig":"8"},{"size":1222,"mtime":1609881942706,"results":"11","hashOfConfig":"8"},{"size":1850,"mtime":1607483485575,"results":"12","hashOfConfig":"8"},{"size":5299,"mtime":1609885110640,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"16fu9sp",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/natalia/Development/flashcards/src/index.js",[],["29","30"],"/Users/natalia/Development/flashcards/src/reportWebVitals.js",[],"/Users/natalia/Development/flashcards/src/App.js",["31","32","33"],"/Users/natalia/Development/flashcards/src/reducers/rootReducer.js",[],"/Users/natalia/Development/flashcards/src/components/Card.js",["34"],"import '../styles/card.scss'\n\nimport React      from 'react'\nimport PropTypes  from 'prop-types'\nimport classnames from 'classnames'\n\n\n\nconst TRANSITION_DELAY = 200\n\nexport default class Card extends React.Component {\n    static propTypes = {\n        // onInMotion: PropTypes.func.isRequired,\n    }\n\n    state = {\n        turning:     false,\n        turningBack: false,\n        turned:      false,\n    }\n\n    componentDidUpdate(prevProps){\n        if (prevProps.isOpen !== this.props.isOpen){\n            this.toggleTurn()\n        }\n    }\n\n\n    handleClick = () => {\n\n        if (this.state.turned) {\n            this.setState({\n                turned:  false,\n                turning: true,\n            })\n    \n            setTimeout(() => {\n                this.setState({  turned:  false, })\n            }, TRANSITION_DELAY)\n            setTimeout(() => {\n                this.setState({ turningBack: true, turning: false,})\n            }, TRANSITION_DELAY)\n            setTimeout(() => {\n                this.setState({ turningBack: false })\n            }, 800)\n        } else {\n            this.setState({\n                turning: true,\n            })\n\n            setTimeout(() => {\n                this.setState({ turned: true, turning: false })\n            }, TRANSITION_DELAY)\n        }\n    }\n\n    render() {\n        const card = this.props.card\n        const { turning, turned, turningBack } = this.state\n        const handleClick = this.handleClick\n\n        const cardClass  = classnames('card-content', { turning, turned, turningBack })\n\n        const cardText = !turned ? card.front : card.back\n\n        return (\n            <div className=\"cardx\">\n                <div className={cardClass} onClick={handleClick}>\n                     <p className=\"card_text\">{ cardText }</p>\n                </div>\n            </div>\n        )\n    }\n}","/Users/natalia/Development/flashcards/src/components/EdditableCard.js",["35"],"import '../styles/card.scss'\n\nimport React      from 'react'\nimport PropTypes  from 'prop-types'\nimport classnames from 'classnames'\n\n\nconst TRANSITION_DELAY = 200\n\nexport default class EditableCard extends React.Component {\n    static propTypes = {\n        // onInMotion: PropTypes.func.isRequired,\n    }\n\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            edit: !props.card.front && !props.card.back ? true : false,\n            show: {\n                turning:     false,\n                turningBack: false,\n                turned:      false,\n            },\n                front: props.card.front,\n                back: props.card.back,\n                id: props.card.id,\n            \n        }\n    }\n\n    componentWillReceiveProps(props) {\n        const state = { ...this.state }\n\n        state.front = props.card.front\n        state.back = props.card.back\n        state.id = props.card.id\n\n        if (props.card.front === '') {\n            this.setState({ edit: true, })\n        }\n\n        this.setState(state)\n    }\n   \n    componentDidUpdate(prevProps){\n        if (prevProps.isOpen !== this.props.isOpen){\n            this.toggleTurn()\n        }\n    }\n\n    handleEditButton = (e) => {\n        e.stopPropagation()\n\n        this.setState({ edit: !this.state.edit })\n    }\n\n    handleClick = () => {\n\n        if (this.state.edit) {\n            return\n        }\n\n        if (this.state.turned) {\n            this.setState({\n                turned:  false,\n                turning: true,\n            })\n    \n            setTimeout(() => {\n                this.setState({  turned:  false, })\n            }, TRANSITION_DELAY)\n            setTimeout(() => {\n                this.setState({ turningBack: true, turning: false,})\n            }, TRANSITION_DELAY)\n            setTimeout(() => {\n                this.setState({ turningBack: false })\n            }, 800)\n        } else {\n            this.setState({\n                turning: true,\n            })\n\n            setTimeout(() => {\n                this.setState({ turned: true, turning: false })\n            }, TRANSITION_DELAY)\n        }\n    }\n\n    handlFrontChange = (e) => {\n        this.setState({front: e.target.value})\n    }\n    handlBackChange = (e) => {\n        this.setState({back: e.target.value})\n    }\n\n    handleSaveButton = () => {\n        const newCard = {front: this.state.front, back: this.state.back, id: this.state.id}\n        const handleSave = this.props.handleSave\n        this.setState({ edit: false }, () => {\n            handleSave(newCard)\n        })\n    }\n\n    handleRemoveButton = (id) => {\n        const handleRemove = this.props.handleRemove\n        handleRemove(id)\n    }\n    \n\n    render() {\n        const card = this.props.card\n        const { turning, turned, turningBack } = this.state\n        const handleClick = this.handleClick\n\n        const cardClass  = classnames('card-content', { turning, turned, turningBack })\n\n        // const cardText = !turned ? card.front : card.back\n\n        let cardText\n\n        if (this.state.edit) {\n            cardText = !turned ? this.state.front : this.state.back\n        } else {\n            cardText = !turned ? card.front : card.back\n        }\n\n        return (\n            <div className=\"cardx\">\n                { this.state.edit ? (\n                            <div className={cardClass} onClick={handleClick}>\n                                <div className=\"top-icons\">\n                                    <span className=\"card-icon\" onClick={this.handleSaveButton} ><i className=\"material-icons right\">play_arrow</i></span>\n                                    <span className=\"card-icon\" onClick={e => {this.handleRemoveButton(this.state.id)}} ><i className=\"material-icons right\">delete_forever</i></span>\n                                </div>\n                                <div className=\"col s12\">\n                                    <div className=\"row\">\n                                        Question:  \n                                        <div className=\"input-field inline\">\n                                            <input onChange={ this.handlFrontChange } type=\"text\" value={this.state.front} name=\"front\"  className=\"validate\"/>\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        Answer:  \n                                        <div className=\"input-field inline\">\n                                            <input onChange={ this.handlBackChange } type=\"text\" value={this.state.back}  name=\"back\" className=\"validate\"/>\n                                        </div>\n                                    </div>\n                                 </div>\n                            </div>\n                 ) : (\n                <div className={cardClass} onClick={handleClick}>\n                    <div className=\"top-icons\">\n                         <span className=\"card-icon\" onClick={this.handleEditButton} ><i className=\"material-icons right\">edit</i></span>\n                    </div>\n                    <p className=\"card_text\">{ cardText }</p>\n                </div>\n                 )\n                }\n                \n\n            </div>\n        )\n    }\n}",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":22,"column":9,"nodeType":"42","messageId":"43","endLine":22,"endColumn":17},{"ruleId":"44","severity":1,"message":"45","line":68,"column":22,"nodeType":"46","endLine":68,"endColumn":66},{"ruleId":"44","severity":1,"message":"45","line":72,"column":13,"nodeType":"46","endLine":72,"endColumn":103},{"ruleId":"40","severity":1,"message":"47","line":4,"column":8,"nodeType":"42","messageId":"43","endLine":4,"endColumn":17},{"ruleId":"40","severity":1,"message":"47","line":4,"column":8,"nodeType":"42","messageId":"43","endLine":4,"endColumn":17},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'instance' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'PropTypes' is defined but never used.","no-global-assign","no-unsafe-negation"]