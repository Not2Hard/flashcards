[{"/Users/natalia/Development/flashcards/src/index.js":"1","/Users/natalia/Development/flashcards/src/reportWebVitals.js":"2","/Users/natalia/Development/flashcards/src/App.js":"3","/Users/natalia/Development/flashcards/src/components/addNewCard.js":"4","/Users/natalia/Development/flashcards/src/reducers/rootReducer.js":"5","/Users/natalia/Development/flashcards/src/components/AddNewCard.js":"6","/Users/natalia/Development/flashcards/src/components/CardSet.js":"7","/Users/natalia/Development/flashcards/src/components/Card.js":"8","/Users/natalia/Development/flashcards/src/components/addCards.js":"9","/Users/natalia/Development/flashcards/src/components/EdditableCard.js":"10"},{"size":710,"mtime":1607356597481,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1606877658013,"results":"13","hashOfConfig":"12"},{"size":2920,"mtime":1609868907759,"results":"14","hashOfConfig":"12"},{"size":1967,"mtime":1607380467278,"results":"15","hashOfConfig":"12"},{"size":1181,"mtime":1609868440764,"results":"16","hashOfConfig":"12"},{"size":2292,"mtime":1607539989207,"results":"17","hashOfConfig":"12"},{"size":160,"mtime":1607381948135,"results":"18","hashOfConfig":"12"},{"size":1850,"mtime":1607483485575,"results":"19","hashOfConfig":"12"},{"size":3095,"mtime":1608391662302,"results":"20","hashOfConfig":"12"},{"size":5464,"mtime":1609868693593,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"16fu9sp",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/natalia/Development/flashcards/src/index.js",[],["46","47"],"/Users/natalia/Development/flashcards/src/reportWebVitals.js",[],"/Users/natalia/Development/flashcards/src/App.js",["48","49"],"/Users/natalia/Development/flashcards/src/components/addNewCard.js",[],"/Users/natalia/Development/flashcards/src/reducers/rootReducer.js",[],"/Users/natalia/Development/flashcards/src/components/AddNewCard.js",["50"],"import React, { useState } from 'react'\nimport { useDispatch} from 'react-redux'\n\nconst AddNewCard = () => {\n    const [carsSet, changeCardSet] = useState([])\n    const [newCardFr, changenewCardFr] = useState('')\n    const [newCardBk, changenewCardBk] = useState('')\n    const dispatch = useDispatch()\n    const uuidv4 = require(\"uuid/v4\")\n\n    const handlechangeFr = (e) => {\n        changenewCardFr(e.target.value)\n        console.log(newCardFr)\n    }\n    const handlechangeBk = (e) => {\n        changenewCardBk(e.target.value)\n        console.log(newCardBk)\n    }\n\n    const createCardSet = (e) => {\n        e.preventDefault()\n        const newCard = {front: newCardFr, back: newCardBk, id: uuidv4()}\n        changeCardSet([ ...carsSet, newCard ])\n        console.log(newCard, carsSet)\n        document.getElementById('front').value = \"\"\n        document.getElementById('back').value = \"\"\n    }\n\n    const addCardInput = () => {\n        // return(\n\n\n        // )\n    } \n\n    return(\n    <div className=\"\">\n        <div className=\"row\">\n            <form className=\"col s12\" onSubmit={createCardSet} id=\"cardInput\">\n                <div className=\"\">\n                    <div className=\"col s6\">\n                        <label>Front of the card\n                            <input type=\"text\" onChange={handlechangeFr}  id=\"front\" className=\"validate\"/>\n                        </label>\n                    </div>\n                    <div className=\"col s6\">\n                        <label>Back of the card\n                            <input type=\"text\" onChange={handlechangeBk}  id=\"back\" className=\"validate\"/>\n                        </label>\n                    </div>\n                </div>\n            \n            <div className=\"col s12\">\n                <div className=\"right\">\n                    <button onClick={() => dispatch({ type: 'AddCard', cards:carsSet})}\n                    className=\"btn waves-effect waves-light\"  name=\"action\">Create Cards\n                    </button>\n                </div>\n                <a onClick={addCardInput} className=\"btn-floating btn-large waves-effect waves-light red\"><i className=\"material-icons\">add</i></a>\n            </div>\n        \n            </form>\n        </div>\n        \n        \n    </div>\n    )\n}\nexport default AddNewCard","/Users/natalia/Development/flashcards/src/components/CardSet.js",["51","52","53"],"/Users/natalia/Development/flashcards/src/components/Card.js",["54"],"import '../styles/card.scss'\n\nimport React      from 'react'\nimport PropTypes  from 'prop-types'\nimport classnames from 'classnames'\n\n\n\nconst TRANSITION_DELAY = 200\n\nexport default class Card extends React.Component {\n    static propTypes = {\n        // onInMotion: PropTypes.func.isRequired,\n    }\n\n    state = {\n        turning:     false,\n        turningBack: false,\n        turned:      false,\n    }\n\n    componentDidUpdate(prevProps){\n        if (prevProps.isOpen !== this.props.isOpen){\n            this.toggleTurn()\n        }\n    }\n\n\n    handleClick = () => {\n\n        if (this.state.turned) {\n            this.setState({\n                turned:  false,\n                turning: true,\n            })\n    \n            setTimeout(() => {\n                this.setState({  turned:  false, })\n            }, TRANSITION_DELAY)\n            setTimeout(() => {\n                this.setState({ turningBack: true, turning: false,})\n            }, TRANSITION_DELAY)\n            setTimeout(() => {\n                this.setState({ turningBack: false })\n            }, 800)\n        } else {\n            this.setState({\n                turning: true,\n            })\n\n            setTimeout(() => {\n                this.setState({ turned: true, turning: false })\n            }, TRANSITION_DELAY)\n        }\n    }\n\n    render() {\n        const card = this.props.card\n        const { turning, turned, turningBack } = this.state\n        const handleClick = this.handleClick\n\n        const cardClass  = classnames('card-content', { turning, turned, turningBack })\n\n        const cardText = !turned ? card.front : card.back\n\n        return (\n            <div className=\"cardx\">\n                <div className={cardClass} onClick={handleClick}>\n                     <p className=\"card_text\">{ cardText }</p>\n                </div>\n            </div>\n        )\n    }\n}","/Users/natalia/Development/flashcards/src/components/addCards.js",["55","56","57"],"import React, { useState } from 'react'\nimport { useDispatch} from 'react-redux'\nconst uuidv4 = require(\"uuid/v4\")\nconst AddCards = () => {\n    const [cardSet, changeCardSet] = useState([{front: '',back: '', id: uuidv4()}])\n    const dispatch = useDispatch()\n    \n\n    const handlecCardChange = (e, index) => {\n        const { name, value } = e.target\n        const cards = [ ... cardSet ]\n        cards[index][name] = value\n        changeCardSet(cards)\n        console.log('changed:',cards[index][name])\n    }\n    \n\n    const createCardSet = (e) => {\n        e.preventDefault()\n        // const newCard = {front: newCardFr, back: newCardBk, id: uuidv4()}\n        // changeCardSet([ ...carsSet, newCard ])\n        console.log(cardSet)\n\n        \n    }\n    const handleRemoveCard = (index) => {\n        const cards = [ ...cardSet]\n        cards.splice(index, 1)\n        changeCardSet(cards)\n        console.log(cardSet)\n    }\n\n    const addCardInput = () => {\n        changeCardSet([ ...cardSet, {front: '',back: '', id: uuidv4()}])\n    } \n\n    return(\n    <div className=\"\">\n        <div className=\"row\">\n            <form className=\"col s12\" onSubmit={createCardSet} id=\"cardInput\">\n                {\n                    cardSet.map((card, i) => {\n                        return(\n                            <div className=\"\">\n                                <div className=\"col s5\">\n                                    <label>Front of the card\n                                        <input type=\"text\" value={card.front} onChange={ e => handlecCardChange(e, i)}  name=\"front\"  className=\"validate\"/>\n                                    </label>\n                                </div>\n                                <div className=\"col s5\">\n                                    <label>Back of the card\n                                        <input type=\"text\" value={card.back} onChange={ e => handlecCardChange(e, i)}  name=\"back\" className=\"validate\"/>\n                                    </label>\n                                </div>\n                                <div className=\"col s1\">\n                                <br/>\n                                <a onClick={e => {handleRemoveCard(i)}} className=\"waves-effect waves-light btn-small grey\">X</a>\n                                </div>\n                                <br/>\n                                <br/>\n                            </div>\n                        )\n                    })\n                }\n                \n            \n            <div className=\"col s12\">\n                <div className=\"right\">\n                    <button onClick={() => dispatch({ type: 'AddCard', cards:cardSet})}\n                    className=\"btn waves-effect waves-light\"  name=\"action\">Update Card Set\n                    </button>\n                </div>\n                <a onClick={addCardInput} className=\"btn-floating btn-large waves-effect waves-light red\"><i className=\"material-icons\">add</i></a>\n            </div>\n        \n            </form>\n        </div>\n        \n        \n    </div>\n    )\n}\nexport default AddCards","/Users/natalia/Development/flashcards/src/components/EdditableCard.js",["58"],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":21,"column":9,"nodeType":"65","messageId":"66","endLine":21,"endColumn":17},{"ruleId":"67","severity":1,"message":"68","line":57,"column":13,"nodeType":"69","endLine":57,"endColumn":103},{"ruleId":"67","severity":1,"message":"68","line":59,"column":17,"nodeType":"69","endLine":59,"endColumn":107},{"ruleId":"70","severity":2,"message":"71","line":9,"column":33,"nodeType":"65","messageId":"72","endLine":9,"endColumn":42},{"ruleId":"73","severity":1,"message":"74","line":10,"column":21,"nodeType":"69","endLine":10,"endColumn":66},{"ruleId":"70","severity":2,"message":"75","line":10,"column":54,"nodeType":"65","messageId":"72","endLine":10,"endColumn":62},{"ruleId":"63","severity":1,"message":"76","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":11,"column":28,"nodeType":"79","messageId":"80","endLine":11,"endColumn":29,"fix":"81"},{"ruleId":"67","severity":1,"message":"68","line":57,"column":33,"nodeType":"69","endLine":57,"endColumn":125},{"ruleId":"67","severity":1,"message":"68","line":73,"column":17,"nodeType":"69","endLine":73,"endColumn":107},{"ruleId":"63","severity":1,"message":"76","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":17},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'instance' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-undef","'cardClass' is not defined.","undef","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'urlImage' is not defined.","'PropTypes' is defined but never used.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"84","text":"85"},"no-global-assign","no-unsafe-negation",[379,380],""]